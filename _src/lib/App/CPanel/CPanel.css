:root {
  --tp-base-background-opacity: 0.41;
  --tp-base-background-color: hsla(0, 0%, 10%, var(--tp-base-background-opacity));
  --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);
  --tp-base-border-radius: 0px;
  --tp-blade-border-radius: 0px;
  --bld-br: 0px;
  --tp-button-background-color: hsla(0, 0%, 80%, 1);
  --tp-button-background-color-active: hsla(0, 0%, 100%, 1);
  --tp-button-background-color-focus: hsla(0, 0%, 95%, 1);
  --tp-button-background-color-hover: hsla(0, 0%, 85%, 1);
  --tp-button-foreground-color: hsla(0, 0%, 0%, 0.8);
  --tp-container-background-color: hsla(0, 0%, 0%, 0.2);
  --tp-container-background-color-active: hsla(0, 0%, 0%, 0.2);
  --tp-container-background-color-focus: hsla(0, 0%, 0%, 0.2);
  --tp-container-background-color-hover: hsla(0, 0%, 0%, 0.2);
  --tp-container-foreground-color: hsla(0, 0%, 100%, 0.8);
  --tp-groove-foreground-color: hsla(0, 0%, 0%, 0.8);
  --tp-input-background-color: hsla(0, 3%, 34%, 0.2);
  --tp-input-background-color-active: hsla(0, 0%, 0%, 0.2);
  --tp-input-background-color-focus: hsla(0, 0%, 0%, 0.2);
  --tp-input-background-color-hover: hsla(0, 3%, 34%, 0.3);
  --tp-input-foreground-color: hsla(0, 0%, 100%, 0.8);
  --tp-label-foreground-color: hsla(0, 0%, 100%, 0.8);
  --tp-monitor-background-color: hsla(0, 0%, 0%, 0.2);
  --tp-monitor-foreground-color: hsla(0, 0%, 100%, 0.8);
}

#controlPanel {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 340px;
}


/* make controlPanelContent scrollable */
#controlPanelContent {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  max-height: calc(100vh - 26px);
  /*
  Using overflow-y: scroll makes this container hide children positioned outside it
  even on x coord (browser behaviour)
  Fixed with JS at runtime (see later in this file)
  */
  overflow-y: scroll;
}

/*
Here, we allow draggable input control to be displayed when dragged outside the panel
in combination with JS pointerdown event in charge with setting .cPanel-mousedown class
and in charge with shifting position according with last scrollTop value
*/
#controlPanelContent.cPanel-mousedown {
  overflow-y: clip;
}

/* hide scrollbar */
#controlPanelContent::-webkit-scrollbar {
  display: none;
}
#controlPanelContent {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

/* make cPanel full width of container */
#controlPanelContent > div {
  width: 100%;
}

/* add label ellipsis and allow it be expanded even when input is disabled */
#controlPanelContent .binding-label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  /* allow expansion for disabled inputs */
  pointer-events: all;
}

#controlPanelContent .binding .binding-label:hover + div {
  transition: width 0.0001s, opacity 0.0001s !important;
  transition-delay: 0.35s !important;
}

/* allow expanding labels by shrinking value containers */
#controlPanelContent:not(.cPanel-mousedown) .binding .binding-label:hover + div {
  width: 0;
  opacity: 0;
}

/* make values bigger to fit Vector4 value */
#controlPanelContent .binding-value {
  width: 240px;
}

#controlPanelContent .binding-value input:disabled {
  /* so that we can click on it, then shift the text with keyboard left/right arrows */
  pointer-events: all;
}

/* hint that tabs are clickable */
#controlPanelContent .cPanel-tab > button > div {
  cursor: pointer;
}

#controlPanelContent input[type="checkbox"] ~ div {
  border: 1px solid #ccc;
  opacity: 0.2;
}

/*
make panel reconstruction unobservable
transition 0 introduces a bug which is fixed in bindings
by dispatching "transitionend" event which it seams that Tweakpane relies on
*/
#controlPanelContent  * {
  transition: none !important;
}



